# Git Workflow and Deployment

## Repository Structure

```
unity-mcp-server/
â”œâ”€â”€ .cursor/
â”‚   â””â”€â”€ rules/           # Cursor AI rules (this folder)
â”œâ”€â”€ .gitignore           # Unity + Python ignores
â”œâ”€â”€ Assets/              # Unity project assets
â”œâ”€â”€ docs/                # Documentation
â”œâ”€â”€ mcp-server/          # Python MCP server
â”‚   â”œâ”€â”€ unity_mcp_server.py
â”‚   â””â”€â”€ requirements.txt
â”œâ”€â”€ Packages/
â”‚   â””â”€â”€ com.vtrinh.unitymcp/  # Unity package (distributable)
â”‚       â”œâ”€â”€ package.json
â”‚       â””â”€â”€ Editor/
â”‚           â””â”€â”€ UnityMCP/
â”‚               â”œâ”€â”€ MCPServer.cs
â”‚               â”œâ”€â”€ MCPTools.cs
â”‚               â””â”€â”€ MCPServerWindow.cs
â”œâ”€â”€ ProjectSettings/     # Unity settings
â””â”€â”€ README.md
```

## Git Workflow

### Branching Strategy (Simple)

```
main (default)
  â”œâ”€â”€ feature/tool-name      # For new tools
  â”œâ”€â”€ fix/issue-description  # For bug fixes
  â””â”€â”€ docs/topic             # For documentation
```

**For now: Commit directly to main** (single developer)

When team grows, use feature branches:
```bash
git checkout -b feature/gameobject-tools
# ... make changes ...
git commit -m "feat: add GameObject manipulation tools"
git push origin feature/gameobject-tools
# Create PR on GitHub
```

### Commit Message Format

Follow Conventional Commits:

```
<type>(<scope>): <subject>

<body>

<footer>
```

**Types:**
- `feat`: New feature/tool
- `fix`: Bug fix
- `docs`: Documentation only
- `refactor`: Code restructure, no behavior change
- `perf`: Performance improvement
- `test`: Adding tests (when we add them)
- `chore`: Build, dependencies, tooling

**Examples:**

```bash
# New tool
git commit -m "feat(tools): add unity_capture_screenshot

- Captures Game View or Scene View
- Returns base64 PNG for AI vision analysis
- Saves to Temp/Screenshots by default
- Tested with 1920x1080 and 1280x720 resolutions"

# Bug fix
git commit -m "fix(server): prevent timeout on main thread operations

- Replaced EditorApplication.delayCall with ConcurrentQueue
- Process commands in EditorApplication.update
- Fixes 28-second timeout issues
- Tested with multiple rapid requests"

# Documentation
git commit -m "docs: add visual feedback loop guide

- Explains screenshot implementation
- Documents testing workflow
- Includes AI iteration patterns"

# Refactor
git commit -m "refactor(tools): extract camera capture logic

- Moved to separate CaptureCamera method
- Reusable for Game/Scene view
- No behavior change"
```

## Version Management

### Package Versioning (Semantic Versioning)

```
MAJOR.MINOR.PATCH

Example: 0.1.0 -> 0.2.0 -> 1.0.0
```

**Current Version:** `0.1.0` (MVP)

**When to bump:**

- `PATCH` (0.1.0 â†’ 0.1.1): Bug fixes, small improvements
- `MINOR` (0.1.0 â†’ 0.2.0): New tools, backward compatible
- `MAJOR` (0.1.0 â†’ 1.0.0): Breaking changes, complete rewrite

**Where to update:**
1. `Packages/com.vtrinh.unitymcp/package.json` - `"version": "0.2.0"`
2. Create git tag: `git tag v0.2.0`
3. Update CHANGELOG.md if exists

### Version Milestones

**v0.1.0** - MVP âœ…
- Basic HTTP server
- Ping, scene info, create cube
- Compilation tools
- Logging tools
- Screenshot capability

**v0.2.0** - Scene Builder (Next)
- GameObject operations (create, delete, find, move)
- Transform manipulation
- Primitive creation
- Scene hierarchy
- **Tag when ready**

**v0.3.0** - Component System
- Add/remove components
- Get/set properties
- Physics components
- Rendering components

**v0.4.0** - UI System
- Canvas creation
- UI elements (button, text, image)
- Layout groups
- Event system

**v1.0.0** - Production Ready
- Stable API
- Comprehensive tools
- Full documentation
- Automated tests
- Performance optimized

## Deployment Process

### Publishing Package Updates

1. **Update version in package.json**
```json
{
  "version": "0.2.0"
}
```

2. **Commit changes**
```bash
git add .
git commit -m "chore: bump version to 0.2.0"
```

3. **Create git tag**
```bash
git tag -a v0.2.0 -m "Release v0.2.0 - Scene Builder"
```

4. **Push with tags**
```bash
git push origin main
git push origin --tags
```

5. **Users update via Package Manager**
Users will see update available in Unity Package Manager

### GitHub Releases

For major versions, create GitHub Release:

1. Go to: https://github.com/vqt123/unity-mcp-server/releases
2. Click "Draft a new release"
3. Choose tag: `v0.2.0`
4. Title: "v0.2.0 - Scene Builder"
5. Description:
   ```markdown
   ## ðŸŽ¯ Scene Builder Release
   
   ### New Tools
   - `unity_create_gameobject` - Create any primitive type
   - `unity_delete_gameobject` - Delete objects by name
   - `unity_move_gameobject` - Set position/rotation/scale
   - `unity_find_gameobject` - Search objects
   - `unity_list_gameobjects` - List all scene objects
   
   ### Improvements
   - Better error messages
   - Performance optimizations
   - Updated documentation
   
   ### Installation
   Add to Unity Package Manager via git URL:
   ```
   https://github.com/vqt123/unity-mcp-server.git?path=/Packages/com.vtrinh.unitymcp
   ```
   
   ### Breaking Changes
   None - fully backward compatible with v0.1.0
   ```

## Installation for End Users

### Method 1: Git URL (Recommended)

Unity Package Manager â†’ "+" â†’ "Add package from git URL":
```
https://github.com/vqt123/unity-mcp-server.git?path=/Packages/com.vtrinh.unitymcp
```

To update to specific version:
```
https://github.com/vqt123/unity-mcp-server.git?path=/Packages/com.vtrinh.unitymcp#v0.2.0
```

### Method 2: Local Package

For development/testing:

1. Clone repo
2. In another Unity project, Package Manager â†’ "+" â†’ "Add package from disk"
3. Navigate to: `unity-mcp-server/Packages/com.vtrinh.unitymcp/package.json`

### Method 3: manifest.json (Advanced)

Edit `Packages/manifest.json`:
```json
{
  "dependencies": {
    "com.vtrinh.unitymcp": "https://github.com/vqt123/unity-mcp-server.git?path=/Packages/com.vtrinh.unitymcp#v0.2.0"
  }
}
```

## Python MCP Server Distribution

### Current: Local Development

Users clone repo and run:
```bash
cd mcp-server
python3.11 -m venv venv
source venv/bin/activate
pip install -r requirements.txt
```

### Future: pip Package

When stable, publish to PyPI:
```bash
pip install unity-mcp-server

# Then in claude_desktop_config.json:
"unity-mcp": {
  "command": "unity-mcp-server",
  "args": []
}
```

**Not yet. Keep local for iteration speed.**

## Documentation Updates

### What to Update on Each Release

1. **README.md** - Feature list, version compatibility
2. **CHANGELOG.md** - What changed (if exists)
3. **Deployment Guide** - Installation instructions
4. **Tool Catalog** - New tools added
5. **Quick Reference** - Updated examples

### Documentation Workflow

```bash
# Update docs in same commit as code
git add docs/Unity-MCP-Tool-Catalog.md
git add Packages/com.vtrinh.unitymcp/Editor/UnityMCP/MCPTools.cs
git commit -m "feat(tools): add unity_delete_gameobject

Documentation updated in Tool Catalog."

# Or separate commit if large docs update
git commit -m "docs: update tool catalog for v0.2.0

- Added all Scene Builder tools
- Updated examples
- Added troubleshooting section"
```

## Continuous Integration (Future)

When ready for automation:

### GitHub Actions Workflow

```yaml
# .github/workflows/unity-build.yml
name: Unity Build

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: game-ci/unity-builder@v2
        with:
          projectPath: .
          buildName: MCPServer
      - uses: actions/upload-artifact@v2
        with:
          name: build
          path: build
```

**Not yet. Manual builds sufficient for MVP.**

## Backup and Safety

### What's Safe to Delete

These regenerate:
- `Library/` (Unity cache)
- `Temp/` (Unity temp)
- `obj/`, `bin/` (build artifacts)
- `.venv/`, `venv/` (Python virtual env)
- `*.log` (logs)

### What to NEVER Delete

These are unique:
- `Assets/` (project files)
- `Packages/com.vtrinh.unitymcp/` (package code)
- `ProjectSettings/` (project config)
- `docs/` (documentation)
- `mcp-server/unity_mcp_server.py` (Python server)

### Backup Strategy

- **GitHub is primary backup** (push often)
- Tag important milestones
- Keep releases for rollback
- Local backups optional (git clone is backup)

## Collaboration Workflow (Future)

When team grows:

### Developer Setup
```bash
git clone https://github.com/vqt123/unity-mcp-server.git
cd unity-mcp-server

# Open Unity project (will import package automatically)
# Unity 2021.3 or later

# Setup Python server
cd mcp-server
python3.11 -m venv venv
source venv/bin/activate
pip install -r requirements.txt
```

### Code Review Checklist
- [ ] Follows tool development workflow
- [ ] Updated both C# and Python
- [ ] Updated documentation
- [ ] Tested manually
- [ ] No compilation errors
- [ ] Good commit message
- [ ] Version bumped if needed

## Release Checklist

Before tagging a release:

- [ ] All tools work
- [ ] No compilation errors/warnings
- [ ] Documentation updated
- [ ] Version bumped in package.json
- [ ] CHANGELOG updated (if exists)
- [ ] Tested in fresh Unity project
- [ ] Tested via Claude Desktop
- [ ] README reflects new features
- [ ] Git history is clean

Then:
```bash
git tag -a v0.X.0 -m "Release v0.X.0"
git push origin main --tags
```

## Summary

- Commit directly to main (for now)
- Use conventional commit messages
- Version follows semver
- Tag releases
- Push often
- Documentation in same commit as code
- GitHub is source of truth
